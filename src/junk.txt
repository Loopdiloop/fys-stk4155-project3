
        """
        # Read the experimental data with Pandas from self.infile.

        Masses = pd.read_fwf(self.infile, usecols=(2,3,4,6,11),
            names=('N', 'Z', 'A', 'Element', 'Ebinding'),
            widths=(1,3,5,5,5,1,3,4,1,13,11,11,9,1,2,11,9,1,3,1,12,11,1),
            header=39,
            index_col=False)

        # Extrapolated values are indicated by '#' in place of the decimal place, so
        # the Ebinding column won't be numeric. Coerce to float and drop these entries.
        Masses['Ebinding'] = pd.to_numeric(Masses['Ebinding'], errors='coerce')
        Masses = Masses.dropna()

        # Convert from keV to MeV.
        Masses['Ebinding'] /= 1000

        # Group the DataFrame by nucleon number, A.
        Masses = Masses.groupby('A')

        # Find the rows of the grouped DataFrame with the maximum binding energy.
        Masses = Masses.apply(lambda t: t[t.Ebinding==t.Ebinding.max()])"""

        """
        drop_modelled = ['Ebinding', 'S(2n)', 'S(2p)','Q(a)','Q(2B-)','Q(B-)']

        for drops in drop_modelled:
            data[drops] = pd.to_numeric(DeprecationWarning[drops], errors='coerce')
        """














            # Extrapolated values are indicated by '#' in place of the decimal place, so
            # the Ebinding column won't be numeric. Coerce to float and drop these entries.
            """Rct1['S(2n)'] = pd.to_numeric(Rct1['S(2n)'], errors='coerce')

            Rct1['S(2p)'] = pd.to_numeric(Rct1['S(2p)'], errors='coerce')

            Rct1['Q(a)'] = pd.to_numeric(Rct1['Q(a)'], errors='coerce')
            
            Rct1['Q(2B-)'] = pd.to_numeric(Rct1['Q(2B-)'], errors='coerce')

            Rct1['Q(B-)'] = pd.to_numeric(Rct1['Q(B-)'], errors='coerce')

            Rct1 = Rct1.dropna()"""

            # Convert from keV to MeV.
            #Rct1['Ebinding'] /= 1000

            # Group the DataFrame by nucleon number, A.
            #Rct1 = Rct1.groupby('A')

            # Find the rows of the grouped DataFrame with the maximum binding energy.
            #Rct1 = Rct1.apply(lambda t: t[t.Ebinding==t.Ebinding.max()])
            
            #print(Rct1)



            # Extrapolated values are indicated by '#' in place of the decimal place, so
            # the Ebinding column won't be numeric. Coerce to float and drop these entries.
            
            #Masses['Ebinding'] = pd.to_numeric(Masses['Ebinding'], errors='coerce')
            #Masses = Masses.dropna()

            # Convert from keV to MeV.
            #Masses['Ebinding'] /= 1000

            # Group the DataFrame by nucleon number, A.
            #Masses = Masses.groupby('A')

            # Find the rows of the grouped DataFrame with the maximum binding energy.
            #Masses = Masses.apply(lambda t: t[t.Ebinding==t.Ebinding.max()])